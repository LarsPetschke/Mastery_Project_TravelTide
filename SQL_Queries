# SQL queries book

# 1. Connecting PostgreSQL Database
traveltide_url = 'postgresql://Test:bQNxVzJL4g6u@ep-noisy-flower-846766.us-east-2.aws.neon.tech/TravelTide'

#2 modify the table 'hotel'
WITH hotels_with_metrics AS (
  SELECT *,
         ABS(check_out_time::DATE - check_in_time::DATE)::int AS nights_new,
         hotel_per_room_usd AS room_charge_per_night,
         ABS(check_out_time::DATE - check_in_time::DATE)::int * rooms * hotel_per_room_usd AS total_hotel_amount,
         TRIM(TO_CHAR(check_in_time, 'FMDay')) AS check_in_weekday,
         EXTRACT(HOUR FROM check_in_time)::int AS check_in_hour
  FROM hotels
),
percentile AS (
  SELECT
          percentile_cont(0.10) WITHIN GROUP (ORDER BY hotel_per_room_usd) AS perc_10,
          percentile_cont(0.34) WITHIN GROUP (ORDER BY hotel_per_room_usd) AS perc_34,
          percentile_cont(0.66) WITHIN GROUP (ORDER BY hotel_per_room_usd) AS perc_66,
          percentile_cont(0.90) WITHIN GROUP (ORDER BY hotel_per_room_usd) AS perc_90
  FROM hotels
)

SELECT
    h.trip_id,
    h.hotel_name,
    h.check_in_weekday,
    h.check_in_hour,
    h.check_in_time,
    h.nights_new,
    h.rooms,
    h.room_charge_per_night,
    CASE
      WHEN h.room_charge_per_night < p.perc_10 THEN 'Budget'
      WHEN h.room_charge_per_night < p.perc_34 THEN 'Economy'
      WHEN h.room_charge_per_night < p.perc_66 THEN 'Mid-range'
      WHEN h.room_charge_per_night < p.perc_90 THEN 'Premium'
      ELSE 'Luxury'
    END AS hotel_price_category,
    h.total_hotel_amount
FROM hotels_with_metrics h
CROSS JOIN percentile p;

#3 Modify 'users' table
WITH users_cte AS (
  SELECT *
        , EXTRACT(YEAR FROM AGE(birthdate))::int AS age
        , EXTRACT(DAY FROM (SELECT MAX(session_end) FROM sessions) - sign_up_date)::int AS membership_duration_days
  FROM users
  )

SELECT
      user_id
    , gender
    , age
    , CASE
          WHEN age < 24 THEN 'young traveler'
          WHEN age between 25 and 34 THEN 'young profs / young families'
          WHEN age between 35 and 44 THEN 'established profs / young families'
          WHEN age between 45 and 54 THEN 'career / parents with older childs'
          WHEN age between 55 and 64 THEN 'pre-retirement / empty nesters'
          ELSE 'seniors'
      END AS age_category
    , married
    , has_children
    , CASE
          WHEN married = true AND has_children = true THEN 'family'           -- married w/ kids
          WHEN married = true AND has_children = false THEN 'couple'          -- married w/o kids
          WHEN married = false AND has_children = true THEN 'single_parent'   -- single w/ kids
          ELSE 'single'
      END AS family_status
    , home_country
    , home_city
    , home_airport
    , sign_up_date::timestamp
    , membership_duration_days
    , CASE
        WHEN membership_duration_days < 180 THEN 'new'                        -- Less than 6 months
        WHEN membership_duration_days BETWEEN 180 AND 360 THEN 'short-term'   -- 6 months to 1 year
        WHEN membership_duration_days BETWEEN 360 AND 720 THEN 'mid-term'     -- 1 year to 2 years
        ELSE 'long-term'                                                      -- More than 2 years
      END AS membership_status
FROM users_cte
;

#4 modify 'flights' table
WITH flights_category AS (
  SELECT
        trip_id
      , origin_airport
      , destination_airport
      , seats
      , return_flight_booked
      , departure_time
      , return_time
      , trip_airline
      , checked_bags
      , base_fare_usd
      , return_time::DATE - departure_time::DATE AS travel_duration
  FROM flights
),
percentile AS (
  SELECT
        percentile_cont(0.10) WITHIN GROUP (ORDER BY base_fare_usd) AS perc_10
      , percentile_cont(0.34) WITHIN GROUP (ORDER BY base_fare_usd) AS perc_34
      , percentile_cont(0.66) WITHIN GROUP (ORDER BY base_fare_usd) AS perc_66
      , percentile_cont(0.90) WITHIN GROUP (ORDER BY base_fare_usd) AS perc_90
  FROM flights
)
SELECT
        f.trip_id
      , f.origin_airport
      , f.destination_airport
      , f.seats
      , f.return_flight_booked
      , f.departure_time
      , f.return_time
      , f.travel_duration
      , CASE
          WHEN f.travel_duration < 2 THEN 'Day trip'                                      -- No overnight stay or just 1 day
          WHEN f.travel_duration BETWEEN 2 AND 3 THEN 'Weekend getaway'                   -- Typical weekend trip (e.g. Fri–Sun or Sat–Mon)
          WHEN f.travel_duration BETWEEN 4 AND 6 THEN 'Short vacation (4–6 days)'         -- Popular short break for a few relaxing days
          WHEN f.travel_duration BETWEEN 7 AND 10 THEN 'Standard vacation (7–10 days)'    -- The classic one-week holiday
          WHEN f.travel_duration BETWEEN 11 AND 14 THEN 'Extended vacation (11–14 days)'  -- Longer holidays like summer vacations or long-distance trips
          ELSE 'Long-term travel (15+ days)'                                              -- Long stays, sabbaticals, or workations
        END AS stay_category
      , f.trip_airline AS airline
      , f.checked_bags
      , f.base_fare_usd
      , CASE
          WHEN f.base_fare_usd < p.perc_10 THEN 'Budget'
          WHEN f.base_fare_usd < p.perc_34 THEN 'Economy'
          WHEN f.base_fare_usd < p.perc_66 THEN 'Mid-range'
          WHEN f.base_fare_usd < p.perc_90 THEN 'Premium'
          ELSE 'Luxury'
        END AS flight_fare_category
FROM flights_category f
CROSS JOIN percentile p
;

# modify sessions table
WITH user_session_counts AS (
    SELECT
        user_id,
        COUNT(session_id) AS total_sessions
    FROM sessions
    WHERE session_start > '2023-01-04'
    GROUP BY user_id
    HAVING COUNT(session_id) > 7
),
cte_sessions AS (
    SELECT
        s.session_id,
        s.user_id,
        s.trip_id,
        s.session_start,
        TRIM(TO_CHAR(s.session_start, 'Day')) AS session_start_weekday,
        EXTRACT(HOUR FROM s.session_start) AS session_start_hour,
        EXTRACT(EPOCH FROM (s.session_end - s.session_start)) / 60 AS session_duration_minutes,
        CASE
            WHEN s.flight_discount = FALSE AND s.hotel_discount = FALSE THEN 'no'
            WHEN s.flight_discount = TRUE AND s.hotel_discount = TRUE THEN 'full'
            ELSE 'partial'
        END AS discount,
        s.flight_discount,
        s.hotel_discount,
        s.flight_discount_amount,
        s.hotel_discount_amount,
        s.flight_booked,
        s.hotel_booked,
        s.page_clicks,
        s.cancellation
    FROM sessions s
    JOIN user_session_counts usc ON s.user_id = usc.user_id
    WHERE s.session_start > '2023-01-04'
),
percentile AS (
    SELECT
        percentile_cont(0.10) WITHIN GROUP (ORDER BY page_clicks) AS perc_10,
        percentile_cont(0.34) WITHIN GROUP (ORDER BY page_clicks) AS perc_34,
        percentile_cont(0.66) WITHIN GROUP (ORDER BY page_clicks) AS perc_66,
        percentile_cont(0.90) WITHIN GROUP (ORDER BY page_clicks) AS perc_90
    FROM sessions
),
page_clicks_category AS (
    SELECT
        session_id,
        user_id,
        page_clicks,
        CASE
            WHEN page_clicks <= p.perc_10 THEN 'Low activity'
            WHEN page_clicks <= p.perc_34 THEN 'Medium activity'
            WHEN page_clicks <= p.perc_66 THEN 'High activity'
            WHEN page_clicks > p.perc_90 THEN 'Very high activity'
            ELSE 'Unknown'
        END AS page_clicks_category
    FROM cte_sessions cte
    CROSS JOIN percentile p
)
SELECT
    cte.session_id,
    cte.user_id,
    cte.trip_id,
    cte.session_start,
    cte.session_start_weekday,
    cte.session_start_hour,
    cte.session_duration_minutes,
    cte.discount,
    cte.flight_discount,
    cte.hotel_discount,
    cte.flight_discount_amount,
    cte.hotel_discount_amount,
    cte.flight_booked,
    cte.hotel_booked,
    cte.page_clicks,
    cte.cancellation,
    pcc.page_clicks_category
FROM cte_sessions cte
LEFT JOIN page_clicks_category pcc ON cte.session_id = pcc.session_id
ORDER BY cte.session_id;
